sudo: required

language: php
php:
  - '7.1.6'

services:
  - docker

branches:
  only:
    - master

# travis runtime environment from here or settings. : https://docs.travis-ci.com/user/environment-variables/
env:


# notification - https://docs.travis-ci.com/user/notifications
# notifications:
#   email:
#     recipients:
#       - one@example.com
#       - other@example.com
#     on_success: never # default: change
#     on_failure: always # default: always
notifications:
  email: false
  slack:
    rooms:
      - ${SLACK_ACCOUNT}:${SLACK_TOKEN}#${SLACK_CHANNEL}"
    template:
      - "Build <%{build_url}|#%{build_number}> (<%{compare_url}|%{commit}>) of %{repository}@%{branch} by %{author} %{result} in %{duration}"


# build lifecycle - https://docs.travis-ci.com/user/customizing-the-build/
# (OPTIONAL) Install apt addons
# (OPTIONAL) Install cache components
# before_install
# install
# before_script
# script
# (OPTIONAL) before_cache (for cleaning up cache)
# after_success or after_failure
# (OPTIONAL) before_deploy
# (OPTIONAL) deploy
# (OPTIONAL) after_deploy
# after_script

# set -e : when error stop build.
before_install:
  - set -e
  - echo `date`

# put testing scripts here
script:
  - echo 'script step...'

#

after_success:
  - echo 'after_success step...'
  - docker --version
  - echo 'install aws cli'
  - pip3 install --user awscli
  - export PATH=$PATH:$HOME/.local/bin
  - echo '*** login to aws ecr and start upload to ecr, deploy to ecs ***'
  - eval $(aws ecr get-login --no-include-email --region ${AWS_DEFAULT_REGION})
  - if [[ $TRAVIS_BRANCH == "master" ]]; then
    export LAST_TAG=$(git describe $(git rev-list --tags --max-count=1));
    echo "*** git last tag:${LAST_TAG} ***";

    echo "*** build docker image and push to ecr ***";
    docker build -t ${DOCKER_IMAGE} .;
    docker tag ${DOCKER_IMAGE}:latest ${ECR_REPOSITORY_DOMAIN}/${DOCKER_IMAGE}:latest;
    docker tag ${DOCKER_IMAGE}:latest ${ECR_REPOSITORY_DOMAIN}/${DOCKER_IMAGE}:${LAST_TAG};
    docker push ${ECR_REPOSITORY_DOMAIN}/${DOCKER_IMAGE}:latest;
    docker push ${ECR_REPOSITORY_DOMAIN}/${DOCKER_IMAGE}:${LAST_TAG};

    echo "*** add new version to ecs task definition ***";
    sed -i -e 's/{ECS_TASK_DEFINITION_NAME}/'"${ECS_TASK_DEFINITION_NAME}"'/g' .ecs-update-service.json;
    sed -i -e 's/{ECS_CONTAINER_NAME}/'"${ECS_CONTAINER_NAME}"'/g' .ecs-update-service.json;
    sed -i -e 's/{ECR_REPOSITORY_DOMAIN}/'"${ECR_REPOSITORY_DOMAIN}"'/g' .ecs-update-service.json;
    sed -i -e 's/{DOCKER_IMAGE}/'"${DOCKER_IMAGE}"'/g' .ecs-update-service.json;
    aws ecs register-task-definition --cli-input-json file://.ecs-update-service.json > ./TASK-NEW.json;
    echo "*** task definition new version content: ***";
    cat ./TASK-NEW.json;

    export NEW_TASK_VERSION=$(cat ./TASK-NEW.json|python3 -c "import sys, json; print(json.load(sys.stdin)['taskDefinition']['taskDefinitionArn'])");
    echo "*** new-task-version=${NEW_TASK_VERSION} ***";
    echo "*** update ecs service ***";
    aws ecs update-service --cluster ${ECS_CLUSTER} --service ${ECS_SERVICE_NAME} --task-definition ${NEW_TASK_VERSION};

    fi
  - echo `date`
